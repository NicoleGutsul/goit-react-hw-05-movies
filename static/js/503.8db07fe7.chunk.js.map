{"version":3,"file":"static/js/503.8db07fe7.chunk.js","mappings":"qMAEaA,EAAQ,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACdC,GAAWC,EAAAA,EAAAA,MACjB,OACI,wBACKF,EAAMG,KAAI,gBAAEC,EAAF,EAAEA,MAAOC,EAAT,EAASA,GAAT,OAAiBD,IACzB,yBACE,SAAC,KAAD,CAAME,GAAE,kBAAaD,GAAME,MAAO,CAACC,KAAMP,GAAzC,SAAqDG,KAD9CC,EADD,KAOtB,C,kGCbYI,EAAY,SAAC,GAAgB,IAAfC,EAAc,EAAdA,SAevB,OACI,kBAAMC,SAfW,SAAAC,GACjBA,EAAIC,iBAEJ,IAAMC,EAASF,EAAIG,cAAcC,SAASC,MAAMC,MAE1B,KAAlBJ,EAAOK,QAKXT,EAASI,GACTF,EAAIG,cAAcK,SALdC,MAAM,4BAMb,EAGG,WACI,kBAAOC,KAAK,OAAOC,KAAK,WACxB,mBAAQD,KAAK,SAAb,sBAGX,E,0BCWD,EA1Be,WAAO,IAAD,EACjB,GAA4BE,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACMZ,EAAK,UAAGW,EAAaE,IAAI,gBAApB,QAAgC,GAO3C,IALAC,EAAAA,EAAAA,YAAU,WACDd,GACLe,EAAAA,EAAAA,YAAgBf,GAAOgB,KAAKP,EAC/B,GAAE,CAACT,KAECQ,EACD,OAAO,KAOX,OACI,4BACI,SAAChB,EAAD,CAAWC,SANE,SAACa,GAClBM,EAAyB,KAATN,EAAc,CAAEN,MAAOM,GAAS,CAAC,EACpD,IAKQE,EAAOS,UAAW,SAACnC,EAAA,EAAD,CAAOC,MAAOyB,EAAOS,YAGnD,C,mBC9BD,IAAMC,EAAU,mCACVC,EAAW,+BA0EjB,IAAMJ,EAAM,CACRK,YAzEJ,SAAqBpB,GACjB,OACIqB,MAAM,GAAD,OAAIF,EAAJ,iCAAqCD,EAArC,kBAAsDlB,EAAtD,+CACJgB,MAAK,SAAAM,GACF,OAAIA,EAASC,GACFD,EAASE,OAGbC,QAAQC,OAAO,IAAIC,MAAJ,cAAiBT,EAAjB,cACzB,GAER,EA+DGU,cA5DJ,WACI,OACIP,MAAM,GAAD,OAAIF,EAAJ,qCAAyCD,IAC7CF,MAAK,SAAAM,GACF,OAAIA,EAASC,GACFD,EAASE,OAGbC,QAAQC,OAAO,IAAIC,MAAJ,cAAiBT,EAAjB,cACzB,GAER,EAkDGW,kBAhDJ,SAA2BC,GAEnB,OACAT,MAAM,GAAD,OAAIF,EAAJ,kBAAsBW,EAAtB,oBAAyCZ,EAAzC,oBACJF,MAAK,SAAAM,GACF,OAAIA,EAASC,GACFD,EAASE,OAGbC,QAAQC,OAAO,IAAIC,MAAJ,cAAiBT,EAAjB,cACzB,GAGR,EAoCGa,UAlCJ,SAAmBD,GAEX,OACAT,MAAM,GAAD,OAAIF,EAAJ,kBAAsBW,EAAtB,4BAAiDZ,EAAjD,oBACJF,MAAK,SAAAM,GACF,OAAIA,EAASC,GACFD,EAASE,OAGbC,QAAQC,OAAO,IAAIC,MAAJ,cAAiBT,EAAjB,cACzB,GAGR,EAsBGc,aApBJ,SAAsBF,GAEd,OACAT,MAAM,GAAD,OAAIF,EAAJ,kBAAsBW,EAAtB,4BAAiDZ,EAAjD,2BACJF,MAAK,SAAAM,GACF,OAAIA,EAASC,GACFD,EAASE,OAGbC,QAAQC,OAAO,IAAIC,MAAJ,cAAiBT,EAAjB,cACzB,GAGR,GAUD,K","sources":["components/Movie/Movie.jsx","components/SearchBox/SearchBox.jsx","pages/Movies.jsx","services/getMoviesAPI.js"],"sourcesContent":["import { Link, useLocation } from \"react-router-dom\";\n\nexport const Movie = ({ items }) => {\n    const location = useLocation();\n    return (\n        <ul>\n            {items.map(({title, id}) => title &&\n               <li key={id}>\n                 <Link to={`/movies/${id}`} state={{from: location}}>{title}</Link>\n               </li>\n            )}\n        </ul>\n    );\n};","export const SearchBox = ({onSearch}) => {\n    const handleSubmit = evt => {\n        evt.preventDefault();\n\n        const search = evt.currentTarget.elements.query.value;\n\n        if (search.trim() === '') {\n            alert('Please enter a valid name');\n            return;\n        }\n\n        onSearch(search);\n        evt.currentTarget.reset();\n    }\n\n    return (\n        <form onSubmit={handleSubmit}>\n            <input type=\"text\" name=\"query\" />\n            <button type=\"submit\">Search</button>\n        </form>\n    );\n};","import { Movie } from \"components/Movie/Movie\";\nimport { SearchBox } from \"components/SearchBox/SearchBox\";\nimport { useEffect, useState } from \"react\";\nimport { useSearchParams } from \"react-router-dom\";\nimport api from \"services/getMoviesAPI\";\n\nconst Movies = () => {\n    const [movies, setMovies] = useState([]);\n    const [searchParams, setSearchParams] = useSearchParams();\n    const query = searchParams.get('query') ?? \"\";\n\n    useEffect(() => {\n        if (!query) return;\n        api.fetchMovies(query).then(setMovies)\n    }, [query])\n\n    if (!movies) {\n        return null;\n    }\n\n    const handleSearch = (name) => {\n        setSearchParams(name !== \"\" ? { query: name } : {});\n    }\n\n    return (\n        <div>\n            <SearchBox onSearch={handleSearch}/>\n            {movies.results && <Movie items={movies.results}/>}\n        </div>\n    )\n};\n\nexport default Movies;","const API_KEY = 'e900ddd99edc3affd146f1905e638fd1';\nconst BASE_URL = 'https://api.themoviedb.org/3';\n\nfunction fetchMovies(query) {\n    return (\n        fetch(`${BASE_URL}/search/movie?api_key=${API_KEY}&query=${query}&language=en-US&page=1&include_adult=false`)\n        .then(response => {\n            if (response.ok) {\n                return response.json();\n            }\n\n            return Promise.reject(new Error(`The ${API_KEY} is wrong`))\n        })\n    )\n}\n\n\nfunction fetchTrending() {\n    return (\n        fetch(`${BASE_URL}/trending/all/day?api_key=${API_KEY}`)\n        .then(response => {\n            if (response.ok) {\n                return response.json();\n            }\n\n            return Promise.reject(new Error(`The ${API_KEY} is wrong`))\n        })\n    );\n};\n\nfunction fetchMovieDetalis(movieId) {\n\n        return (\n        fetch(`${BASE_URL}/movie/${movieId}?api_key=${API_KEY}&language=en-US`)\n        .then(response => {\n            if (response.ok) {\n                return response.json();\n            }\n\n            return Promise.reject(new Error(`The ${API_KEY} is wrong`))\n        })\n    );\n\n};\n\nfunction fetchCast(movieId) {\n\n        return (\n        fetch(`${BASE_URL}/movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`)\n        .then(response => {\n            if (response.ok) {\n                return response.json();\n            }\n\n            return Promise.reject(new Error(`The ${API_KEY} is wrong`))\n        })\n    );\n\n};\n\nfunction fetchReviews(movieId) {\n\n        return (\n        fetch(`${BASE_URL}/movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US&page=1`)\n        .then(response => {\n            if (response.ok) {\n                return response.json();\n            }\n\n            return Promise.reject(new Error(`The ${API_KEY} is wrong`))\n        })\n    );\n\n};\n\nconst api = {\n    fetchMovies,\n    fetchTrending,\n    fetchMovieDetalis,\n    fetchCast,\n    fetchReviews,\n};\n\nexport default api;\n\n\n\n"],"names":["Movie","items","location","useLocation","map","title","id","to","state","from","SearchBox","onSearch","onSubmit","evt","preventDefault","search","currentTarget","elements","query","value","trim","reset","alert","type","name","useState","movies","setMovies","useSearchParams","searchParams","setSearchParams","get","useEffect","api","then","results","API_KEY","BASE_URL","fetchMovies","fetch","response","ok","json","Promise","reject","Error","fetchTrending","fetchMovieDetalis","movieId","fetchCast","fetchReviews"],"sourceRoot":""}